import asyncio
import random
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
API_TOKEN = '8030481560:AAE15GipYIF6UeJlzFkggED8kWxG5spi2zY'
ADMIN_ID = 7880438865  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —Å–¥–µ–ª–æ–∫:
# –î–ª—è RUB
RECEIVER_CARD = "2204120118196936"
# –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
CRYPTO_WALLET_TON = "UQB-qPuyNz9Ib75AHe43Jz39HBlThp9Bnvcetb06OfCnhsi2"
CRYPTO_WALLET_USDT = "TMVBMmiQ1cci4t4K6DSbJEMSNpoUufADC6"
CRYPTOBOT_LINK = "https://t.me/send?start=IVnVvwBFGe5t"

BOT_USERNAME = "TTHGRTbot"  # –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏:
# {
#   "buyer_id": ...,
#   "seller_id": ...,
#   "amount": ...,
#   "currency": ...,
#   "product": ...,
#   "buyer_screenshot": ...,
#   "seller_screenshot": ...,
#   "seller_requisites": ...,
# }
deals = {}

# ===== –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
class Form(StatesGroup):
    waiting_for_currency = State()
    waiting_for_amount = State()
    waiting_for_product = State()
    waiting_for_payment_screenshot = State()
    waiting_for_transfer_screenshot = State()
    waiting_for_requisites = State()  # –Ω–æ–≤—ã–π: –∂–¥—ë–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞

# ===== –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) =====
@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –≤–∏–¥–∞ "deal_XXXX" ‚Äì —ç—Ç–æ –≤—Ö–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Å–¥–µ–ª–∫—É
    parts = message.text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else ""
    if args and args.startswith("deal_"):
        try:
            deal_id = args.split("_")[1]
        except IndexError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.", parse_mode="HTML")
            return
        if deal_id not in deals:
            await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", parse_mode="HTML")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –Ω–µ –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        if deals[deal_id]["buyer_id"] == message.from_user.id:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–¥–µ–ª–∫–µ.", parse_mode="HTML")
            return
        # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if deals[deal_id].get("seller_id") is not None:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ.", parse_mode="HTML")
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞
        deals[deal_id]["seller_id"] = message.from_user.id
        await message.answer(
            f"üîπ <b>–í—ã –∑–∞—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É #{deal_id}</b>\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞.",
            parse_mode="HTML"
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        buyer_id = deals[deal_id]["buyer_id"]
        await bot.send_message(buyer_id, f"üîî –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ #{deal_id}.", parse_mode="HTML")
        await state.set_state(Form.waiting_for_transfer_screenshot)
    else:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äì –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")]
        ])
        await message.answer(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TTH GRT</b> ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç!\n\n"
            "üíº <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>\n"
            "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ –∏–≥—Ä ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
            "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>\n"
            "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî <a href=\"https://telegra.ph/Kak-polzovatsya-botom-TTH-GRT--P2P-garant-02-09\">–∑–¥–µ—Å—å</a>.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True  # –£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
        )
        
# ===== –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) =====
@dp.callback_query(F.data == "create_deal")
async def create_deal(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ RUB, Crypto –∏ CryptoBot (USD —É–±—Ä–∞–Ω)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¥ RUB", callback_data="currency_rub")],
        [InlineKeyboardButton(text="üíé Crypto", callback_data="currency_crypto")],
        [InlineKeyboardButton(text="ü§ñ CryptoBot", callback_data="currency_cryptobot")]
    ])
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(Form.waiting_for_currency)
    await callback.answer()

@dp.callback_query(F.data.startswith("currency_"))
async def process_currency(callback: types.CallbackQuery, state: FSMContext):
    currency = callback.data.split('_')[1]  # rub, crypto, cryptobot
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏
    deal_id = f"{random.randint(1000, 9999)}"
    deal_link = f"https://t.me/{BOT_USERNAME}?start=deal_{deal_id}"
    await state.update_data(currency=currency, deal_id=deal_id, deal_link=deal_link)
    await bot.send_message(callback.from_user.id,
        f"üîπ <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency.upper()}.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.",
        parse_mode="HTML")
    await state.set_state(Form.waiting_for_amount)
    await callback.answer()

@dp.message(Form.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏:", parse_mode="HTML")
        await state.set_state(Form.waiting_for_product)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.", parse_mode="HTML")

@dp.message(Form.waiting_for_product)
async def process_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data["deal_id"]
    deal_link = data["deal_link"]
    product = message.text
    amount = data["amount"]
    currency = data["currency"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    deals[deal_id] = {
        "buyer_id": message.from_user.id,
        "seller_id": None,
        "amount": amount,
        "currency": currency,
        "product": product,
        "buyer_screenshot": None,
        "seller_screenshot": None,
        "seller_requisites": None
    }
    
    await state.update_data(product=product)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_{deal_id}")]
    ])
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞–ª—é—Ç—ã
    if currency.lower() == "rub":
        instructions = f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} RUB –Ω–∞ –∫–∞—Ä—Ç—É <b>{RECEIVER_CARD}</b>."
    elif currency.lower() == "crypto":
        instructions = (f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n"
                        f"TON: <code>{CRYPTO_WALLET_TON}</code>\n"
                        f"USDT TRC20: <code>{CRYPTO_WALLET_USDT}</code>")
    elif currency.lower() == "cryptobot":
        instructions = f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT —á–µ—Ä–µ–∑ <a href=\"{CRYPTOBOT_LINK}\">CryptoBot</a>."
    else:
        instructions = ""
    
    await message.answer(
        f"‚úÖ <b>–°–¥–µ–ª–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üìå <b>–¢–æ–≤–∞—Ä:</b> {product}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency.upper()}\n\n"
        f"{instructions}\n\n"
        f"üîó –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ: <a href=\"{deal_link}\">–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É</a>\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        reply_markup=cancel_keyboard,
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_payment_screenshot)

@dp.message(Form.waiting_for_payment_screenshot, F.photo)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data["deal_id"]
    deals[deal_id]["buyer_screenshot"] = message.photo[-1].file_id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –µ—Å–ª–∏ –µ—Å—Ç—å username, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
    buyer = message.from_user
    if buyer.username:
        user_info = f"@{buyer.username}"
    else:
        user_info = f"<a href='tg://user?id={buyer.id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç</a>"
    await message.answer("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.", parse_mode="HTML")
    await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=f"üì© <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {user_info} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        parse_mode="HTML"
    )
    await state.clear()

# ===== –ü—Ä–æ–¥–∞–≤–µ—Ü: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ =====
@dp.message(Form.waiting_for_transfer_screenshot, F.photo)
async def process_transfer_screenshot(message: types.Message, state: FSMContext):
    # –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ seller_id
    seller_deal_id = None
    for d_id, deal in deals.items():
        if deal.get("seller_id") == message.from_user.id and deal.get("seller_screenshot") is None:
            seller_deal_id = d_id
            break
    if seller_deal_id is None:
        await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", parse_mode="HTML")
        return
    deals[seller_deal_id]["seller_screenshot"] = message.photo[-1].file_id
    await message.answer(
        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.",
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_requisites)

@dp.message(Form.waiting_for_requisites)
async def process_requisites(message: types.Message, state: FSMContext):
    seller_deal_id = None
    for d_id, deal in deals.items():
        if deal.get("seller_id") == message.from_user.id and deal.get("seller_requisites") is None:
            seller_deal_id = d_id
            break
    if seller_deal_id is None:
        await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", parse_mode="HTML")
        return
    deals[seller_deal_id]["seller_requisites"] = message.text
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
    seller = message.from_user
    if seller.username:
        user_info = f"@{seller.username}"
    else:
        user_info = f"<a href='tg://user?id={seller.id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç</a>"
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"confirm_{seller_deal_id}")],
        [InlineKeyboardButton(text="‚ùå –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"refund_{seller_deal_id}")]
    ])
    caption = (
        f"üì© <b>–°–¥–µ–ª–∫–∞ #{seller_deal_id}</b> –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü {user_info} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {message.text}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞."
    )
    await bot.send_photo(
        ADMIN_ID,
        deals[seller_deal_id]["seller_screenshot"],
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await message.answer("–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.", parse_mode="HTML")
    await state.clear()

# ===== –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äì –ø–æ–∫—É–ø–∞—Ç–µ–ª—å) =====
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_deal(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[1]
    deal = deals.get(deal_id)
    if not deal:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", parse_mode="HTML")
        return
    if callback.from_user.id != deal.get("buyer_id"):
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É.", show_alert=True)
        return
    await bot.send_message(ADMIN_ID, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (ID: {callback.from_user.id}).", parse_mode="HTML")
    await callback.message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")
    seller_id = deal.get("seller_id")
    if seller_id:
        await bot.send_message(seller_id, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.", parse_mode="HTML")
    del deals[deal_id]
    await callback.answer()

# ===== –ê–¥–º–∏–Ω: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–¥–µ–ª–∫–∏ =====
@dp.callback_query(F.data.startswith("confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[1]
    deal = deals.get(deal_id)
    if not deal:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return
    buyer_id = deal.get("buyer_id")
    seller_id = deal.get("seller_id")
    await bot.send_message(buyer_id, f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.", parse_mode="HTML")
    if seller_id:
        await bot.send_message(seller_id, f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.", parse_mode="HTML")
    await callback.message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", parse_mode="HTML")
    del deals[deal_id]

@dp.callback_query(F.data.startswith("refund_"))
async def admin_refund(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[1]
    deal = deals.get(deal_id)
    if not deal:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return
    buyer_id = deal.get("buyer_id")
    seller_id = deal.get("seller_id")
    await bot.send_message(buyer_id, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤–∞–º.", parse_mode="HTML")
    if seller_id:
        await bot.send_message(seller_id, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode="HTML")
    await callback.message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.", parse_mode="HTML")
    del deals[deal_id]

# ===== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =====
@dp.message(Command("msg"))
async def admin_send_message(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:
    command_args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/msg buyer <deal_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n/msg seller <deal_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    split_args = args.split(maxsplit=2)
    if len(split_args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/msg buyer <deal_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n/msg seller <deal_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

        role, deal_id, msg_text = split_args
        await message.reply("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if role.lower() == "buyer":
        target_id = deals[deal_id]["buyer_id"]
    elif role.lower() == "seller":
        target_id = deals[deal_id].get("seller_id")
        if not target_id:
            await message.reply("–ü—Ä–æ–¥–∞–≤–µ—Ü –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ.")
            return
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ buyer –∏–ª–∏ seller.")
        return

    try:
        await bot.send_message(target_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{msg_text}", parse_mode="HTML")
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
