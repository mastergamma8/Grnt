import asyncio
import random
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
API_TOKEN = '8030481560:AAE15GipYIF6UeJlzFkggED8kWxG5spi2zY'
ADMIN_ID = 7880438865  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
RECEIVER_CARD = "2204120118196936"  # –†–µ–∫–≤–∏–∑–∏—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞
BOT_USERNAME = "TTHGRTbot"  # –ë–µ–∑ —Å–∏–º–≤–æ–ª–∞ @

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
# deals = {
#    "deal_id": {
#         "buyer_id": ...,
#         "seller_id": ...,
#         "amount": ...,
#         "currency": ...,
#         "product": ...,
#         "buyer_screenshot": ...,
#         "seller_screenshot": ...
#     },
#     ...
# }
deals = {}

# ===== –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
class Form(StatesGroup):
    waiting_for_currency = State()
    waiting_for_amount = State()
    waiting_for_product = State()
    waiting_for_payment_screenshot = State()
    waiting_for_transfer_screenshot = State()
    waiting_for_card_number = State()  # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É"

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start =====
@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    args = message.get_args()  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "deal_1234")
    if args and args.startswith("deal_"):
        try:
            deal_id = args.split("_")[1]
        except IndexError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            return
        if deal_id not in deals:
            await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Å–¥–µ–ª–∫–µ
        deals[deal_id]["seller_id"] = message.from_user.id
        await message.answer(
            f"üîπ *–í—ã –∑–∞—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É #{deal_id}*\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞.",
            parse_mode="Markdown"
        )
        await state.set_state(Form.waiting_for_transfer_screenshot)
    else:
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
            [InlineKeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="add_card")]
        ])
        await message.answer(
            "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TTH GRT* ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç!\n\n"
            "üíº *–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!*\n"
            "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# ===== –§—É–Ω–∫—Ü–∏—è "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É" =====
@dp.callback_query(F.data == "add_card")
async def add_card(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):")
    await state.set_state(Form.waiting_for_card_number)
    await callback.answer()

@dp.message(Form.waiting_for_card_number)
async def process_card_number(message: types.Message, state: FSMContext):
    if not re.match(r"^\d{16}$", message.text):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).")
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑—É –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
    await message.answer("‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()

# ===== –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äì –ø–æ–∫—É–ø–∞—Ç–µ–ª—å) =====
@dp.callback_query(F.data == "create_deal")
async def create_deal(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd")],
        [InlineKeyboardButton(text="üí¥ RUB", callback_data="currency_rub")],
        [InlineKeyboardButton(text="üíé Crypto", callback_data="currency_crypto")]
    ])
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard)
    await state.set_state(Form.waiting_for_currency)
    await callback.answer()

@dp.callback_query(F.data.startswith("currency_"))
async def process_currency(callback: types.CallbackQuery, state: FSMContext):
    currency = callback.data.split('_')[1]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999
    deal_id = f"{random.randint(1000, 9999)}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    deal_link = f"https://t.me/{BOT_USERNAME}?start=deal_{deal_id}"
    await state.update_data(currency=currency, deal_id=deal_id, deal_link=deal_link)
    await bot.send_message(callback.from_user.id,
        f"üîπ *–°–¥–µ–ª–∫–∞ #{deal_id}*\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency}.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.",
        parse_mode="Markdown")
    await state.set_state(Form.waiting_for_amount)
    await callback.answer()

@dp.message(Form.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏:")
        await state.set_state(Form.waiting_for_product)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.")

@dp.message(Form.waiting_for_product)
async def process_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data["deal_id"]
    deal_link = data["deal_link"]
    product = message.text
    amount = data["amount"]
    currency = data["currency"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    deals[deal_id] = {
        "buyer_id": message.from_user.id,
        "seller_id": None,
        "amount": amount,
        "currency": currency,
        "product": product,
        "buyer_screenshot": None,
        "seller_screenshot": None
    }
    
    await state.update_data(product=product)
    
    await message.answer(
        f"‚úÖ *–°–¥–µ–ª–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
        f"üìå *–¢–æ–≤–∞—Ä:* {product}\n"
        f"üí∞ *–°—É–º–º–∞:* {amount} {currency}\n\n"
        f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} {currency} –Ω–∞ –∫–∞—Ä—Ç—É *{RECEIVER_CARD}*.\n\n"
        f"üîó –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ: [–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É]({deal_link})\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        parse_mode="Markdown"
    )
    await state.set_state(Form.waiting_for_payment_screenshot)

@dp.message(Form.waiting_for_payment_screenshot, F.photo)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data["deal_id"]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —Å–¥–µ–ª–∫–µ
    deals[deal_id]["buyer_screenshot"] = message.photo[-1].file_id
    await message.answer("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω –∞–¥–º–∏–Ω—É
    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id,
        caption=f"üì© *–°–¥–µ–ª–∫–∞ #{deal_id}*\n\n‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        parse_mode="Markdown")
    await state.clear()

@dp.message(Form.waiting_for_transfer_screenshot, F.photo)
async def process_transfer_screenshot(message: types.Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü
    seller_deal_id = None
    for d_id, deal in deals.items():
        if deal.get("seller_id") == message.from_user.id and deal.get("seller_screenshot") is None:
            seller_deal_id = d_id
            break
    if seller_deal_id is None:
        await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    deals[seller_deal_id]["seller_screenshot"] = message.photo[-1].file_id
    await message.answer("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω!")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"confirm_{seller_deal_id}")],
        [InlineKeyboardButton(text="‚ùå –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"refund_{seller_deal_id}")]
    ])
    await bot.send_message(ADMIN_ID,
        f"üì¢ *–°–¥–µ–ª–∫–∞ #{seller_deal_id}* –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.",
        reply_markup=keyboard,
        parse_mode="Markdown")
    await state.clear()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =====
@dp.callback_query(F.data.startswith("confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[1]
    deal = deals.get(deal_id)
    if not deal:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    buyer_id = deal.get("buyer_id")
    seller_id = deal.get("seller_id")
    await bot.send_message(buyer_id, f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.")
    if seller_id:
        await bot.send_message(seller_id, f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.")
    await callback.message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    del deals[deal_id]

@dp.callback_query(F.data.startswith("refund_"))
async def admin_refund(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[1]
    deal = deals.get(deal_id)
    if not deal:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    buyer_id = deal.get("buyer_id")
    seller_id = deal.get("seller_id")
    await bot.send_message(buyer_id, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤–∞–º.")
    if seller_id:
        await bot.send_message(seller_id, f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await callback.message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
    del deals[deal_id]

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
