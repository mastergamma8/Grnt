import asyncio
import re
import random
import string
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

API_TOKEN = "7846917008:AAGaj9ZsWnb_2GmZC0q7YqTQEV39l0eBHxs"
BOT_CARD = "2204120118196936"  # –ö–∞—Ä—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∞
ADMIN_ID = 7880438865  # –¢–≤–æ–π Telegram ID (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

class Form(StatesGroup):
    waiting_for_currency = State()
    waiting_for_amount = State()
    waiting_for_product = State()
    waiting_for_payment_screenshot = State()
    waiting_for_seller_confirmation = State()
    waiting_for_admin_check = State()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
deals = {}

def generate_deal_id():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

@router.message(F.text == "/start")
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")]
    ])

    text = ("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *TTH GRT* ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π *P2P-–≥–∞—Ä–∞–Ω—Ç*!\n\n"
            "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!\n"
            "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:")

    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "create_deal")
async def process_create_deal(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd")],
        [InlineKeyboardButton(text="‚ÇΩ RUB", callback_data="currency_rub")],
        [InlineKeyboardButton(text="ü™ô Crypto", callback_data="currency_crypto")]
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard)
    await state.set_state(Form.waiting_for_currency)
    await callback.answer()

@router.callback_query(F.data.startswith("currency_"))
async def process_currency(callback: types.CallbackQuery, state: FSMContext):
    currency = callback.data.split("_")[1]
    await state.update_data(currency=currency)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: *{currency}*.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏.", parse_mode="Markdown")
    await state.set_state(Form.waiting_for_amount)
    await callback.answer()

@router.message(Form.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer("üõç –£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
        await state.set_state(Form.waiting_for_product)
    except ValueError:
        await message.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

@router.message(Form.waiting_for_product)
async def process_product(message: types.Message, state: FSMContext):
    deal_id = generate_deal_id()
    data = await state.get_data()
    amount = data["amount"]
    currency = data["currency"]
    product = message.text

    deals[deal_id] = {
        "buyer_id": message.chat.id,
        "amount": amount,
        "currency": currency,
        "product": product,
        "seller_id": None,
        "buyer_screenshot": None,
        "seller_screenshot": None
    }

    text = (f"üìå *–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:*\n\n"
            f"üõç –¢–æ–≤–∞—Ä: {product}\n"
            f"üíµ –°—É–º–º–∞: {amount} {currency}\n\n"
            f"üîπ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç—É –≥–∞—Ä–∞–Ω—Ç–∞:*\n`{BOT_CARD}`\n\n"
            f"üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"üìé –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: [–Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞](https://t.me/TestMacprobot?start={deal_id})")

    await message.answer(text, parse_mode="Markdown")
    await state.set_state(Form.waiting_for_payment_screenshot)

@router.message(Form.waiting_for_payment_screenshot, F.photo)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    for deal_id, deal in deals.items():
        if deal["buyer_id"] == message.chat.id:
            deal["buyer_screenshot"] = message.photo[-1].file_id
            await message.answer("üì§ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –∑–∞–≥—Ä—É–∑–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.")
            await state.clear()
            return
    await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.message(F.text.startswith("/start "))
async def process_seller_link(message: types.Message, state: FSMContext):
    deal_id = message.text.split("/start ")[1]

    if deal_id not in deals:
        await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    deals[deal_id]["seller_id"] = message.chat.id

    await message.answer("üì¶ –í—ã –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.set_state(Form.waiting_for_seller_confirmation)

@router.message(Form.waiting_for_seller_confirmation, F.photo)
async def process_seller_screenshot(message: types.Message, state: FSMContext):
    for deal_id, deal in deals.items():
        if deal["seller_id"] == message.chat.id:
            deal["seller_screenshot"] = message.photo[-1].file_id
            await message.answer("üì§ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç –∞–¥–º–∏–Ω.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –æ–±–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            await bot.send_photo(ADMIN_ID, deal["buyer_screenshot"], caption=f"üí≥ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —Å–¥–µ–ª–∫–µ {deal_id}.")
            await bot.send_photo(ADMIN_ID, deal["seller_screenshot"], caption=f"üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Å–¥–µ–ª–∫–µ {deal_id}.")

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm_{deal_id}")]
            ])

            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–¥–µ–ª–∫—É {deal_id}. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.", reply_markup=keyboard)
            await state.clear()
            return
    await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    deal_id = callback.data.split("_")[2]

    if deal_id in deals:
        deal = deals[deal_id]
        await bot.send_message(deal["buyer_id"], "‚úÖ –ì–∞—Ä–∞–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await bot.send_message(deal["seller_id"], "‚úÖ –ì–∞—Ä–∞–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É! –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

        del deals[deal_id]
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await callback.message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
